@using UI.Infrastructure.ObjectDetection.Models

@if (IsProcessed && VideoFrames.Any())
{
    <div class="mt-6 p-4">
        <div class="space-y-4">
            <p class="font-medium">
                Video processing complete: Found @TotalDetectionCount total detections across @TotalFrames frames (@Math.Round(VideoFrameRate, digits: 0) fps).
            </p>

            @if (HasDetections)
            {
                <div class="space-y-4">
                    <div class="space-y-2">
                        <h3 class="font-medium">
                            Detection Summary:
                        </h3>
                        <div class="grid grid-cols-2 gap-2">
                            @foreach ((string Label, int DetectionCount, float MaxConfidence) summary in DetectionSummaries)
                            {
                                <div class="p-2 bg-gray-800/20 border border-gray-600/20 rounded">
                                    <div class="flex justify-between">
                                        <span class="text-blue-300">
                                            @summary.Label
                                        </span>
                                        <span class="text-sm text-gray-400">
                                            @summary.DetectionCount detections (max: @Math.Round(summary.MaxConfidence * 100, 1)%)
                                        </span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="space-y-2">
                        <h3 class="font-medium">
                            Detections per frame:
                        </h3>
                        <div class="max-h-96 overflow-y-auto space-y-2">
                            @foreach (VideoFrame frame in VideoFrames.OrderBy(f => f.FrameNumber))
                            {
                                <div class="p-3 bg-gray-800/30 border border-gray-600/30 rounded-lg">
                                    <div class="mb-2 pb-2 border-b border-gray-600/30">
                                        <span class="font-medium text-gray-300">
                                            Frame @frame.FrameNumber (@frame.Timestamp.ToString(@"mm\:ss\.ff"))
                                        </span>
                                        <span class="ml-2 text-sm text-gray-400">
                                            @frame.Detections.Length detection@(frame.Detections.Length == 1 ? "" : "s")
                                        </span>
                                    </div>
                                    <div class="space-y-1">
                                        @foreach (DetectionResult detection in frame.Detections.OrderByDescending(d => d.Confidence))
                                        {
                                            <div class="flex items-center justify-between">
                                                <div class="flex items-center space-x-2">
                                                    <span class="font-medium text-blue-300">
                                                        @detection.Label
                                                    </span>
                                                    <span class="text-xs text-gray-500">
                                                        x: @Math.Round(detection.BoundingBox.X, 0), y: @Math.Round(detection.BoundingBox.Y, 0), w: @Math.Round(detection.BoundingBox.Width, 0), h: @Math.Round(detection.BoundingBox.Height, 0)
                                                    </span>
                                                </div>
                                                <span class="text-sm font-medium text-green-300">
                                                    @Math.Round(detection.Confidence * 100, 1)%
                                                </span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {

    /// <summary>
    /// Indicates whether video processing has completed successfully
    /// </summary>
    [Parameter]
    public bool IsProcessed { get; set; }

    /// <summary>
    /// Frames from video
    /// </summary>
    [Parameter]
    public IReadOnlyList<VideoFrame> VideoFrames { get; set; } = [];

    /// <summary>
    /// Total number of processed frames
    /// </summary>
    [Parameter]
    public int TotalFrames { get; set; }

    /// <summary>
    /// Video frame rate
    /// </summary>
    [Parameter]
    public double VideoFrameRate { get; set; }

    /// <summary>
    /// If any detections were found
    /// </summary>
    private bool HasDetections => VideoFrames.Any(f => f.Detections.Any());

    /// <summary>
    /// Total number of detections across all frames
    /// </summary>
    private int TotalDetectionCount => VideoFrames.Sum(f => f.Detections.Length);

    /// <summary>
    /// Summary of detections grouped by label
    /// </summary>
    private (string Label, int DetectionCount, float MaxConfidence)[] DetectionSummaries => VideoFrames.SelectMany(f => f.Detections)
                                                                                                       .GroupBy(d => d.Label)
                                                                                                       .Select(g => (g.Key,
                                                                                                                   DetectionCount: g.Count(),
                                                                                                                   MaxConfidence: g.Max(x => x.Confidence)))
                                                                                                       .OrderByDescending(x => x.DetectionCount)
                                                                                                       .ToArray();

}
