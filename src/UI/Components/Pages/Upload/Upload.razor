@page "/upload"
@rendermode InteractiveServer
@inject ILogger<Upload> Logger
@inject UploadedVideoProcessor UploadedVideoProcessor
@inject FileService FileService
@using System.Diagnostics
@using UI.Infrastructure
@using UI.Components.Pages.Upload.Components

<div class="container mx-auto py-5 px-4">
    <div class="max-w-3xl mx-auto">
        <div class="space-y-4">
            <h1 class="text-3xl font-bold tracking-tight">
                Upload Video
            </h1>
            <p class="text-gray-400">
                Upload a video file to detect objects. Supported formats: MP4
            </p>
        </div>

        <UploadButton VideoFile="_videoFile"
                      VideoDuration="_objectDetectionState.VideoDuration"
                      IsDisabled="ShouldDisableInput()"
                      HasFailed="_objectDetectionState.Status == ObjectDetectionStatus.Failed"
                      OnFileSelected="UploadFileAsync"/>

        <ProcessingStatus StatusMessages="_objectDetectionState.StatusMessages.Value"/>

        <DetectionResults IsProcessed="_objectDetectionState.Status == ObjectDetectionStatus.Processed"
                          FrameResults="_objectDetectionState.FrameResults"
                          TotalFrames="_objectDetectionState.TotalFrames"
                          VideoFrameRate="_objectDetectionState.VideoFrameRate"/>

        <VideoPlayer IsProcessed="_objectDetectionState.Status == ObjectDetectionStatus.Processed"
                     VideoUrl="@GetVideoUrl()"/>
    </div>
</div>

@code {
    private UploadedVideoFile? _videoFile;
    private readonly ObjectDetectionState _objectDetectionState = new();

    private const int MaxAllowedFiles = 1;

    private async Task UploadFileAsync(InputFileChangeEventArgs eventArgs)
    {
        _objectDetectionState.Reset();
        _videoFile = null;
        StateHasChanged();

        _objectDetectionState.SetUploading();
        StateHasChanged();

        switch (eventArgs.FileCount)
        {
            case 0:
                return;
            case > MaxAllowedFiles:
                _objectDetectionState.SetFailed(errorMessage: "Please select only one video file.");
                StateHasChanged();

                return;
        }

        IBrowserFile browserFile = eventArgs.File;
        _videoFile = new UploadedVideoFile(browserFile.Name, browserFile.Size);

        // todo: show error to user when file is not video file
        // $"File type is not supported. Allowed types: {string.Join(", ", UploadedVideoFile.SupportedExtensions}"
        bool isVideoFile = _videoFile.IsVideoFile();
        // todo: show error to user when file size is 0
        // $"File size ({fileSizeMb:F1} MB) exceeds maximum allowed size ({UploadedVideoFile.MaxFileSizeInBytes:F1} MB)"
        bool isEmptyFile = _videoFile.IsFileEmpty();

        await UploadVideoAsync(browserFile, _videoFile);

        await ProcessVideoAsync(_videoFile);
    }

    private async Task UploadVideoAsync(IBrowserFile browserFile, UploadedVideoFile videoFile)
    {
        Result<string> result = await FileService.SaveFileAsync(browserFile);

        if (!result.IsSuccess)
        {
            Logger.LogWarning("File upload failed: {ErrorMessage}", result.ErrorMessage);

            _objectDetectionState.SetFailed(errorMessage: $"Error saving file: {result.ErrorMessage}");
            StateHasChanged();

            return;
        }

        Debug.Assert(result.Value != null, "result.Value != null");
        videoFile.SetFilePath(result.Value);

        _objectDetectionState.SetUploaded(videoFile.OriginalFileName);
        StateHasChanged();

        Logger.LogInformation("Video file saved to {FilePath}", videoFile.FilePath);
    }

    private async Task ProcessVideoAsync(UploadedVideoFile videoFile)
    {
        Progress<VideoProcessingProgress> progressHandler = new(HandleProcessingProgress);

        Result<VideoProcessingResult> result = await UploadedVideoProcessor.ProcessVideoAsync(videoFile,
                                                                                              progressCallback: progressHandler);

        if (!result.IsSuccess)
        {
            Logger.LogWarning("Video processing failed: {ErrorMessage}", result.ErrorMessage);

            _objectDetectionState.SetFailed(errorMessage: $"Error processing video: {result.ErrorMessage}");
            StateHasChanged();

            return;
        }

        Debug.Assert(_videoFile is not null, "_videoFile is null");
        _videoFile.MarkAsProcessed();

        _objectDetectionState.SetProcessed(result.Value!);
        StateHasChanged();
    }

    private void HandleProcessingProgress(VideoProcessingProgress progress)
    {
        _objectDetectionState.UpdateProcessingProgress(progress);
        StateHasChanged();
    }

    private bool ShouldDisableInput() => _objectDetectionState.Status is not (ObjectDetectionStatus.None or
        ObjectDetectionStatus.Processed or
        ObjectDetectionStatus.Failed);

    private string GetVideoUrl()
    {
        if (_videoFile == null || string.IsNullOrWhiteSpace(_videoFile.SavedFileName))
            return string.Empty;

        return $"/api/video/{Uri.EscapeDataString(_videoFile.SavedFileName)}";
    }
}
