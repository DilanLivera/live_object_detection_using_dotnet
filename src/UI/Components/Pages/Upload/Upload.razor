@page "/upload"
@rendermode InteractiveServer
@inject ILogger<Upload> Logger
@inject UploadedVideoProcessor UploadedVideoProcessor
@inject FileStorageService FileStorageService
@inject IJSRuntime JsRuntime
@using System.Diagnostics
@using UI.Infrastructure.FileStorage

<div class="container mx-auto py-10 px-4">
    <div class="max-w-3xl mx-auto">
        <div class="space-y-4">
            <h1 class="text-3xl font-bold tracking-tight">
                Upload Video
            </h1>
            <p class="text-gray-400">
                Upload a video file to detect objects. Supported formats: MP4
            </p>
        </div>

        <div class="mt-6">
            <div class="flex items-center">
                <label for="videoUpload"
                       class="inline-flex items-center px-5 py-2.5 bg-gray-800 hover:bg-gray-700 text-white font-medium rounded-lg transition-colors cursor-pointer">
                    <svg class="w-4 h-4 mr-2"
                         aria-hidden="true"
                         xmlns="http://www.w3.org/2000/svg"
                         fill="none"
                         viewBox="0 0 24 24"
                         stroke="currentColor">
                        <path stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0l-4 4m4-4v12"/>
                    </svg>
                    Select Video
                    <InputFile id="videoUpload"
                               class="hidden"
                               accept=".mp4"
                               OnChange="@UploadFileAsync"
                               disabled="@ShouldDisableInput()"/>
                </label>
                @if (_videoFile != null && _objectDetectionState.Status != ObjectDetectionStatus.Failed)
                {
                    <span class="ml-3 text-gray-400">
                        @_videoFile.Name (@Math.Round((double)_videoFile.Size / (1024 * 1024), 1) MB) @(_objectDetectionState.VideoDuration != null ? $@"- {_objectDetectionState.VideoDuration.Value:hh\:mm\:ss}" : "")
                    </span>
                }
            </div>
        </div>

        <div class="mt-6 space-y-4">
            @if (_objectDetectionState.StatusMessages.Count > 0)
            {
                foreach (StatusMessage message in _objectDetectionState.StatusMessages.Value)
                {
                    <div class="p-4 @message.CssClass rounded-lg">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-3">
                                @if (message.ShouldShowSpinner)
                                {
                                    <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-grey-500"></div>
                                }
                                <span class="@message.TextClass">@message.Text</span>
                            </div>
                            <span class="text-xs text-gray-500">
                                @message.CreatedAt.ToString(format: "HH:mm:ss")
                            </span>
                        </div>
                        @if (message.ShouldShowProgress && message.Progress > 0)
                        {
                            <div class="w-full bg-gray-700 rounded-full h-2.5 mt-2">
                                <div class="bg-green-600 h-2.5 rounded-full transition-all duration-300"
                                     style="width: @(message.Progress * 100)%">
                                </div>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(message.Details))
                        {
                            <div class="mt-2 text-sm @message.TextClass opacity-80">
                                @message.Details
                            </div>
                        }
                    </div>
                }
            }
        </div>

        @if (_objectDetectionState.Status == ObjectDetectionStatus.Processed)
        {
            <div class="mt-6 p-4">
                <div class="space-y-4">
                    <p class="font-medium">
                        Video processing complete: Found @_objectDetectionState.FrameResults.Sum(f => f.Detections.Length) total detections across @_objectDetectionState.TotalFrames frames (@Math.Round(_objectDetectionState.VideoFrameRate, digits: 0) fps).
                    </p>

                    @{
                        var allDetections = _objectDetectionState.FrameResults
                                                                 .SelectMany(frame => frame.Detections
                                                                                           .Select(detection => new
                                                                                                                {
                                                                                                                    frame.FrameNumber,
                                                                                                                    frame.Timestamp,
                                                                                                                    Detection = detection
                                                                                                                }))
                                                                 .ToList();

                        var detectionSummary = allDetections
                                               .GroupBy(x => x.Detection.Label)
                                               .Select(g => new { Label = g.Key, Count = g.Count(), MaxConfidence = g.Max(x => x.Detection.Confidence) })
                                               .OrderByDescending(x => x.Count)
                                               .ToList();

                    }

                    @if (allDetections.Any())
                    {
                        <div class="space-y-4">
                            <div class="space-y-2">
                                <h3 class="font-medium">
                                    Detection Summary:
                                </h3>
                                <div class="grid grid-cols-2 gap-2">
                                    @foreach (var summary in detectionSummary)
                                    {
                                        <div class="p-2 bg-gray-800/20 border border-gray-600/20 rounded">
                                            <div class="flex justify-between">
                                                <span class="text-blue-300">
                                                    @summary.Label
                                                </span>
                                                <span class="text-sm text-gray-400">
                                                    @summary.Count detections (max: @Math.Round(summary.MaxConfidence * 100, 1)%)
                                                </span>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>

                            <div class="space-y-2">
                                <h3 class="font-medium">
                                    Detections per frame:
                                </h3>
                                <div class="max-h-96 overflow-y-auto space-y-2">
                                    @{
                                        var frameGroups = allDetections.GroupBy(x => x.FrameNumber)
                                                                       .OrderBy(g => g.Key)
                                                                       .ToList();
                                    }

                                    @foreach (var frameGroup in frameGroups)
                                    {
                                        <div class="p-3 bg-gray-800/30 border border-gray-600/30 rounded-lg">
                                            <div class="mb-2 pb-2 border-b border-gray-600/30">
                                                <span class="font-medium text-gray-300">
                                                    Frame @frameGroup.Key (@frameGroup.First().Timestamp.ToString(@"mm\:ss\.ff"))
                                                </span>
                                                <span class="ml-2 text-sm text-gray-400">
                                                    @frameGroup.Count() detection@(frameGroup.Count() == 1 ? "" : "s")
                                                </span>
                                            </div>
                                            <div class="space-y-1">
                                                @foreach (var detection in frameGroup.OrderByDescending(d => d.Detection.Confidence))
                                                {
                                                    <div class="flex items-center justify-between">
                                                        <div class="flex items-center space-x-2">
                                                            <span class="font-medium text-blue-300">
                                                                @detection.Detection.Label
                                                            </span>
                                                            <span class="text-xs text-gray-500">
                                                                x: @Math.Round(detection.Detection.BoundingBox.X, 0), y: @Math.Round(detection.Detection.BoundingBox.Y, 0), w: @Math.Round(detection.Detection.BoundingBox.Width, 0), h: @Math.Round(detection.Detection.BoundingBox.Height, 0)
                                                            </span>
                                                        </div>
                                                        <span class="text-sm font-medium text-green-300">
                                                            @Math.Round(detection.Detection.Confidence * 100, 1)%
                                                        </span>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            @if (_objectDetectionState.Status == ObjectDetectionStatus.Processed)
            {
                <div class="mt-8 p-4 bg-gray-800/20 border border-gray-600/20 rounded-lg">
                    <div class="space-y-4">
                        <div class="relative rounded-lg overflow-hidden bg-black">
                            <div class="relative aspect-video">
                                <video id="processedVideo"
                                       class="absolute top-0 left-0 w-full h-full object-contain"
                                       controls
                                       preload="metadata"
                                       src="@GetVideoUrl()">
                                    Your browser does not support the video tag.
                                </video>
                            </div>
                        </div>

                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    private UploadedVideoFile? _videoFile;
    private readonly ObjectDetectionState _objectDetectionState = new();

    private const long MaxFileSizeInBytes = 500 * 1024 * 1024; // 500 MB
    private const int MaxAllowedFiles = 1;

    private async Task UploadFileAsync(InputFileChangeEventArgs eventArgs)
    {
        _objectDetectionState.Reset();
        _videoFile = null;
        StateHasChanged();

        _objectDetectionState.SetUploading();
        StateHasChanged();

        switch (eventArgs.FileCount)
        {
            case 0:
                return;
            case > MaxAllowedFiles:
                _objectDetectionState.SetFailed(errorMessage: "Please select only one video file.");
                StateHasChanged();

                return;
        }

        IBrowserFile file = eventArgs.File;

        await UploadVideoAsync(file);

        await ProcessVideoAsync();
    }

    private async Task UploadVideoAsync(IBrowserFile file)
    {
        Result<string> result = await FileStorageService.SaveFileAsync(file, MaxFileSizeInBytes);

        if (!result.IsSuccess)
        {
            Logger.LogWarning("File upload failed: {ErrorMessage}", result.ErrorMessage);

            _objectDetectionState.SetFailed(errorMessage: $"Error saving file: {result.ErrorMessage}");
            StateHasChanged();

            return;
        }

        _videoFile = new UploadedVideoFile(file.Name, file.Size, filePath: result.Value!);

        _objectDetectionState.SetUploaded(_videoFile.Name);
        StateHasChanged();

        Logger.LogInformation("Video file saved to {FilePath}", _videoFile.FilePath);
    }

    private async Task ProcessVideoAsync()
    {
        Progress<VideoProcessingProgress> progressHandler = new(HandleProcessingProgress);

        Result<VideoProcessingResult> result = await UploadedVideoProcessor.ProcessVideoAsync(_videoFile!,
                                                                                              progressCallback: progressHandler);

        if (!result.IsSuccess)
        {
            Logger.LogWarning("Video processing failed: {ErrorMessage}", result.ErrorMessage);

            _objectDetectionState.SetFailed(errorMessage: $"Error processing video: {result.ErrorMessage}");
            StateHasChanged();

            return;
        }

        Debug.Assert(_videoFile is not null, "_videoFile is null");
        _videoFile.MarkAsProcessed();

        _objectDetectionState.SetProcessed(result.Value!);
        StateHasChanged();
    }

    private void HandleProcessingProgress(VideoProcessingProgress progress)
    {
        _objectDetectionState.UpdateProcessingProgress(progress);
        StateHasChanged();
    }

    private bool ShouldDisableInput() => _objectDetectionState.Status is not (ObjectDetectionStatus.None or
        ObjectDetectionStatus.Processed or
        ObjectDetectionStatus.Failed);

    private string GetVideoUrl()
    {
        Debug.Assert(_videoFile != null, "Video file should not be null when getting video URL");
        Debug.Assert(!string.IsNullOrWhiteSpace(_videoFile.SavedFileName),
                     "Video file saved filename should not be null or empty when getting video URL");

        return $"/api/video/{Uri.EscapeDataString(_videoFile.SavedFileName)}";
    }


}
