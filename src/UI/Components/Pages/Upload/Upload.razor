@page "/upload"
@rendermode InteractiveServer
@inject ILogger<Upload> Logger
@inject VideoUploadOrchestrator UploadOrchestrator
@using UI.Components.Pages.Upload.Components

<div class="container mx-auto py-5 px-4">
    <div class="max-w-3xl mx-auto">
        <div class="space-y-4">
            <h1 class="text-3xl font-bold tracking-tight">
                Upload Video
            </h1>
            <p class="text-gray-400">
                Upload a video file to detect objects. Supported formats: MP4
            </p>
        </div>

        <UploadButton OriginalFileName="@_videoFile?.OriginalFileName"
                      SizeInBytes="@_videoFile?.SizeInBytes"
                      VideoDuration="_videoFile?.Duration"
                      ShouldDisable="IsObjectDetectionInProgress()"
                      HasFailed="_objectDetectionState.Status == ObjectDetectionStatus.Failed"
                      OnFileSelected="ProcessVideoUploadAsync"/>

        <ProcessingStatus StatusMessages="_objectDetectionState.StatusMessages.Value"/>

        <DetectionResults IsProcessed="IsProcessed"
                          VideoFrames="_videoFile?.VideoFrames.AsReadOnly()"
                          TotalFrames="_videoFile?.TotalFrames ?? 0"
                          VideoFrameRate="_videoFile?.FrameRate ?? 0"/>

        <VideoPlayer IsProcessed="IsProcessed"
                     VideoUrl="@GetVideoUrl()"/>
    </div>
</div>

@code {
    private UploadedVideoFile? _videoFile;
    private readonly ObjectDetectionState _objectDetectionState = new();

    /// <summary>
    /// Handles the complete video upload and processing workflow, including object detection.
    /// </summary>
    /// <param name="eventArgs">Event arguments containing the selected video file information</param>
    /// <returns>A task representing the asynchronous operation</returns>
    private async Task ProcessVideoUploadAsync(InputFileChangeEventArgs eventArgs)
    {
        _objectDetectionState.Reset();
        _videoFile = null;

        _objectDetectionState.SetUploading();
        StateHasChanged();

        Progress<VideoProcessingProgress> progressHandler = new(HandleVideoProcessingProgress);

        Result<UploadedVideoFile> result = await UploadOrchestrator.ProcessUploadAsync(eventArgs, progressHandler);

        if (!result.IsSuccess)
        {
            Logger.LogWarning("Upload failed: {ErrorMessage}", result.ErrorMessage);
            _objectDetectionState.SetFailed(result.ErrorMessage!);
            StateHasChanged();

            return;
        }

        _videoFile = result.Value;
    }

    /// <summary>
    /// Handles real-time progress updates from video processing.
    /// </summary>
    /// <param name="progress">Progress information containing the current status, frame counts, and completion state</param>
    private void HandleVideoProcessingProgress(VideoProcessingProgress progress)
    {
        switch (progress.Status)
        {
            case ObjectDetectionStatus.Uploaded:
                _objectDetectionState.SetUploaded(progress.FileName!);

                break;

            case ObjectDetectionStatus.ExtractingFrames:
                _objectDetectionState.UpdateFrameExtractionProgress(progress.CurrentFrame,
                                                                    progress.TotalFrames);

                break;

            case ObjectDetectionStatus.DetectingObjects:
                _objectDetectionState.UpdateObjectDetectionProgress(processedFrames: progress.CurrentFrame,
                                                                    progress.TotalFrames);

                break;

            case ObjectDetectionStatus.Complete:
                _objectDetectionState.SetComplete();

                break;
        }

        StateHasChanged();
    }

    /// <summary>
    /// Determines if object detection is in progress.
    /// </summary>
    /// <returns>True if object detection is currently in progress, false otherwise</returns>
    private bool IsObjectDetectionInProgress() => _objectDetectionState.Status is not (
        ObjectDetectionStatus.None or
        ObjectDetectionStatus.Complete or
        ObjectDetectionStatus.Failed);

    /// <summary>
    /// Indicates whether the object detection is complete.
    /// </summary>
    private bool IsProcessed => _objectDetectionState.Status == ObjectDetectionStatus.Complete;

    /// <summary>
    /// Generates the video URL for playback after processing is complete.
    /// </summary>
    /// <returns>The URL to the processed video file, or an empty string if no file is available</returns>
    private string GetVideoUrl()
    {
        if (_videoFile == null || string.IsNullOrWhiteSpace(_videoFile.SavedFileName)) return string.Empty;

        return $"/api/video/{Uri.EscapeDataString(_videoFile.SavedFileName)}";
    }
}
