@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JsRuntime
@inject ILogger<Home> Logger
@inject ObjectDetector ObjectDetector
@using UI.Infrastructure
@using UI.Infrastructure.Models
@implements IAsyncDisposable

<PageTitle>Home</PageTitle>

<div class="text-center mb-12">
    <p class="text-gray-400 text-lg mb-8">
        Real-time object detection using camera
    </p>
    @if (_error != null)
    {
        <div class="mx-auto max-w-lg p-4 mb-6 rounded-lg bg-red-900/50 border border-red-500/50">
            <p class="text-red-200">@_error</p>
        </div>
    }
    <button @onclick="ToggleCameraAsync"
            class="px-8 py-3 text-lg font-medium rounded-full text-white transition-all duration-200
                    focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-900 transform hover:scale-105 hover:bg-gray-600
                    @(_isCameraActive ? "bg-red-500" : "bg-green-500")">
        @(_isCameraActive ? "Stop Camera" : "Start Camera")
    </button>
</div>

<div class="relative max-w-4xl mx-auto rounded-2xl overflow-hidden shadow-2xl bg-gray-800/50 backdrop-blur-sm border border-gray-700/50">
    <div class="aspect-w-16 aspect-h-9 relative">
        <video id="cameraFeed"
               autoplay
               playsinline
               muted
               class="absolute top-0 left-0 w-full h-full object-cover">
        </video>
        <canvas id="detectionOverlay"
                class="absolute top-0 left-0 w-full h-full pointer-events-none">
        </canvas>
    </div>
    @if (_isCameraActive)
    {
        <div class="absolute top-4 right-4">
            <div class="flex items-center space-x-2 bg-gray-900/70 rounded-full px-3 py-1.5 backdrop-blur-sm">
                <div class="w-2 h-2 rounded-full bg-green-500 animate-pulse"></div>
                <span class="text-xs text-gray-300 font-medium">Live</span>
            </div>
        </div>
    }
</div>

@code {
    private string? _error;
    private bool _isCameraActive;
    private PeriodicTimer? _detectionTimer;
    private const int DetectionIntervalMs = 100;
    private int _consecutiveFailures = 0; // Track failures to prevent endless retry loops when connection is unstable
    private const int MaxConsecutiveFailures = 3;

    /// <summary>
    /// Toggles camera state between active and inactive.
    /// </summary>
    private async Task ToggleCameraAsync()
    {
        if (_isCameraActive)
        {
            await StopCameraAsync();
        }
        else
        {
            await StartCameraAsync();
        }
    }

    /// <summary>
    /// Starts camera feed and object detection loop.
    /// </summary>
    private async Task StartCameraAsync()
    {
        try
        {
            // Reset failure counter on fresh start to give clean slate
            _consecutiveFailures = 0;
            bool isCameraInitialized = await JsRuntime.InvokeAsync<bool>(identifier: "CameraManager.initializeCamera", args: "cameraFeed");
            if (!isCameraInitialized)
            {
                _error = "Failed to initialize camera. Please ensure camera permissions are granted.";
                return;
            }

            _error = null;
            _isCameraActive = true;

            _detectionTimer = new PeriodicTimer(period: TimeSpan.FromMilliseconds(DetectionIntervalMs));
            _ = RunDetectionLoopAsync();
        }
        catch (Exception ex)
        {
            _error = $"Error: {ex.Message}";
        }
    }

    /// <summary>
    /// Stops camera feed and cleans up resources.
    /// </summary>
    private async Task StopCameraAsync()
    {
        try
        {
            if (_detectionTimer is not null)
            {
                _detectionTimer.Dispose();
            }

            await JsRuntime.InvokeVoidAsync(identifier: "CameraManager.stopCamera", args: "cameraFeed");
            await JsRuntime.InvokeVoidAsync(identifier: "CameraManager.clearCanvas", args: "detectionOverlay");
            _isCameraActive = false;
            _error = null;
        }
        catch (Exception ex)
        {
            _error = $"Error stopping camera: {ex.Message}";
        }
    }

    /// <summary>
    /// Runs object detection loop when the camera is active.
    /// </summary>
    private async Task RunDetectionLoopAsync()
    {
        try
        {
            if (_detectionTimer == null) return;

            while (await _detectionTimer.WaitForNextTickAsync())
            {
                try
                {
                    if (_consecutiveFailures >= MaxConsecutiveFailures)
                    {
                        Logger.LogWarning("Too many consecutive failures, stopping camera");
                        await StopCameraAsync();
                        _error = "Connection unstable. Please try again.";
                        break;
                    }

                    CapturedImage image = await JsRuntime.InvokeAsync<CapturedImage>(identifier: "CameraManager.captureFrame", "cameraFeed");

                    if (image.Data.Length == 0)
                    {
                        Logger.LogWarning("Failed to capture frame: No image data received");
                        _consecutiveFailures++;
                        continue;
                    }

                    // Allow recovery from temporary connection issues
                    _consecutiveFailures = 0;

                    DetectionResult[] detections = ObjectDetector.Detect(image.Data, image.IsCompressed);

                    await JsRuntime.InvokeVoidAsync(identifier: "CameraManager.drawDetections", "detectionOverlay", "cameraFeed", detections);
                }
                catch (TaskCanceledException)
                {
                    // Track SignalR timeouts to detect persistent connection problems
                    _consecutiveFailures++;
                    Logger.LogWarning("Frame capture was canceled (attempt {Attempt} of {Max})",
                                      _consecutiveFailures, MaxConsecutiveFailures);
                }
                catch (Exception ex)
                {
                    _consecutiveFailures++;
                    Logger.LogError(ex,
                                    "Detection error (attempt {Attempt} of {Max})",
                                    _consecutiveFailures,
                                    MaxConsecutiveFailures);
                }
            }
        }
        catch (Exception ex)
        {
            _error = $"Detection loop error: {ex.Message}";
            await StopCameraAsync();
        }
    }

    private class CapturedImage {
        public byte[] Data { get; init; } = [];
        public bool IsCompressed { get; init; }
    }

    public async ValueTask DisposeAsync()
    {
        if (_detectionTimer is not null)
        {
            _detectionTimer.Dispose();
        }

        await StopCameraAsync();
    }

}

<style>
    /*
        Without a fixed aspect ratio container, the video would stretch and distort when the browser window is resized.
        The 16:9 ratio matches most modern webcam outputs and provides a consistent viewing experience.
     */
    .aspect-w-16 { position: relative; padding-bottom: calc(var(--tw-aspect-h) / var(--tw-aspect-w) * 100%); }
    .aspect-w-16 > * { position: absolute; height: 100%; width: 100%; top: 0; right: 0; bottom: 0; left: 0; }
    .aspect-h-9 { --tw-aspect-h: 9; --tw-aspect-w: 16; }
</style>
