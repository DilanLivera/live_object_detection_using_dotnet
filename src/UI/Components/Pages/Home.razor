@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JsRuntime
@inject ILogger<Home> Logger
@inject ObjectDetector ObjectDetector
@implements IAsyncDisposable

<PageTitle>Home</PageTitle>

<div class="text-center mb-12">
    <p class="text-gray-400 text-lg mb-8">
        Real-time object detection using camera
    </p>
    @if (_error != null)
    {
        <div class="mx-auto max-w-lg p-4 mb-6 rounded-lg bg-red-900/50 border border-red-500/50">
            <p class="text-red-200">@_error</p>
        </div>
    }
    <button @onclick="ToggleCamera"
            class="px-8 py-3 text-lg font-medium rounded-full text-white transition-all duration-200 
                           focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-900
                           @(_isCameraActive ? "bg-gray-700 hover:bg-gray-600 focus:ring-gray-500" : "bg-gray-600 hover:bg-gray-500 focus:ring-gray-400")
                           transform hover:scale-105">
        @(_isCameraActive ? "Stop Camera" : "Start Camera")
    </button>
</div>

<div class="relative max-w-4xl mx-auto rounded-2xl overflow-hidden shadow-2xl bg-gray-800/50 backdrop-blur-sm 
                    border border-gray-700/50">
    <div class="aspect-w-16 aspect-h-9 relative">
        <video id="cameraFeed"
               autoplay
               playsinline
               muted
               class="absolute top-0 left-0 w-full h-full object-cover">
        </video>
        <canvas id="detectionOverlay"
                class="absolute top-0 left-0 w-full h-full pointer-events-none">
        </canvas>
    </div>
    @if (_isCameraActive)
    {
        <div class="absolute top-4 right-4">
            <div class="flex items-center space-x-2 bg-gray-900/70 rounded-full px-3 py-1.5 backdrop-blur-sm">
                <div class="w-2 h-2 rounded-full bg-green-500 animate-pulse"></div>
                <span class="text-xs text-gray-300 font-medium">Live</span>
            </div>
        </div>
    }
</div>

@code {
    private string? _error;
    private bool _isCameraActive;
    private PeriodicTimer? _detectionTimer;
    private const int DetectionIntervalMs = 100;
    private int _consecutiveFailures = 0; // Track failures to prevent endless retry loops when connection is unstable
    private const int MaxConsecutiveFailures = 3;

    private async Task ToggleCamera()
    {
        if (_isCameraActive)
        {
            await StopCamera();
        }
        else
        {
            await StartCamera();
        }
    }

    private async Task StartCamera()
    {
        try
        {
            // Reset failure counter on fresh start to give clean slate
            _consecutiveFailures = 0;
            var result = await JsRuntime.InvokeAsync<bool>("CameraManager.initializeCamera", "cameraFeed");
            if (!result)
            {
                _error = "Failed to initialize camera. Please ensure camera permissions are granted.";
                return;
            }

            _error = null;
            _isCameraActive = true;

            _detectionTimer = new PeriodicTimer(TimeSpan.FromMilliseconds(DetectionIntervalMs));
            _ = RunDetectionLoop();
        }
        catch (Exception ex)
        {
            _error = $"Error: {ex.Message}";
        }
    }

    private async Task StopCamera()
    {
        try
        {
            if (_detectionTimer != null)
            {
                _detectionTimer.Dispose();
                _detectionTimer = null;
            }

            await JsRuntime.InvokeVoidAsync("CameraManager.stopCamera", "cameraFeed");
            await JsRuntime.InvokeVoidAsync("CameraManager.clearCanvas", "detectionOverlay");
            _isCameraActive = false;
            _error = null;
        }
        catch (Exception ex)
        {
            _error = $"Error stopping camera: {ex.Message}";
        }
    }

    /// <summary>
    /// Generates fake detection data to test the visualization and UI components.
    /// This is only to be used during the development.
    /// </summary>
    private DetectionResult[] GenerateFakeDetections()
    {
        Random random = new();
        string[] sampleLabels = ["person", "car", "dog", "cat", "chair", "bottle"];

        // Generate 1-3 random detections
        var count = random.Next(1, 4);
        var detections = new DetectionResult[count];

        for (var i = 0; i < count; i++)
        {
            // Random position and size (as percentage of image)
            var x = (float)random.NextDouble() * 0.7f; // Keep within 70% of width
            var y = (float)random.NextDouble() * 0.7f; // Keep within 70% of height
            var width = (float)random.NextDouble() * 0.3f + 0.1f; // 10-40% of image width
            var height = (float)random.NextDouble() * 0.3f + 0.1f; // 10-40% of image height

            detections[i] = new DetectionResult
            {
                Label = sampleLabels[random.Next(sampleLabels.Length)],
                Confidence = (float)random.NextDouble() * 0.5f + 0.5f, // 50-100% confidence
                Box = new Box
                {
                    X = x,
                    Y = y,
                    Width = width,
                    Height = height
                }
            };
        }

        return detections;
    }

    private async Task RunDetectionLoop()
    {
        try
        {
            if (_detectionTimer == null) return;

            while (await _detectionTimer.WaitForNextTickAsync())
            {
                try
                {
                    // Stop processing if connection is consistently unreliable
                    if (_consecutiveFailures >= MaxConsecutiveFailures)
                    {
                        Logger.LogWarning("Too many consecutive failures, stopping camera");
                        await StopCamera();
                        _error = "Connection unstable. Please try again.";
                        break;
                    }

                    var image = await JsRuntime.InvokeAsync<byte[]>("CameraManager.captureFrame", "cameraFeed");

                    if (image.Length == 0)
                    {
                        Logger.LogWarning("Failed to capture frame: No image data received");
                        _consecutiveFailures++;
                        continue;
                    }

                    // Logger.LogInformation("Received image data: {Size} bytes", image.Length);

                    // Allow recovery from temporary connection issues
                    _consecutiveFailures = 0;

                    // Generate and draw fake detections
                    // var fakeDetections = GenerateFakeDetections();
                    var detections = await ObjectDetector.DetectObjectsAsync(image);

                    // Logger.LogDebug("Generated {DetectionCount} detections", detections.Length);
                    await JsRuntime.InvokeVoidAsync("CameraManager.drawDetections", "detectionOverlay", detections);

                    // Add a small delay between captures
                    await Task.Delay(100);
                }
                catch (TaskCanceledException)
                {
                    // Track SignalR timeouts to detect persistent connection problems
                    _consecutiveFailures++;
                    Logger.LogWarning(
                        "Frame capture was canceled (attempt {Attempt} of {Max})",
                        _consecutiveFailures, MaxConsecutiveFailures);
                }
                catch (Exception ex)
                {
                    // Include other errors in failure tracking for overall stability
                    _consecutiveFailures++;
                    Logger.LogError(
                        ex,
                        "Detection error (attempt {Attempt} of {Max})",
                        _consecutiveFailures, MaxConsecutiveFailures);
                }
            }
        }
        catch (Exception ex)
        {
            _error = $"Detection loop error: {ex.Message}";
            await StopCamera();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_detectionTimer is not null)
        {
            _detectionTimer.Dispose();
        }

        await StopCamera();
    }

}

<style>
    /*
        Without a fixed aspect ratio container, the video would stretch and distort when the browser window is resized.
        The 16:9 ratio matches most modern webcam outputs and provides a consistent viewing experience.
     */
    .aspect-w-16 { position: relative; padding-bottom: calc(var(--tw-aspect-h) / var(--tw-aspect-w) * 100%); }
    .aspect-w-16 > * { position: absolute; height: 100%; width: 100%; top: 0; right: 0; bottom: 0; left: 0; }
    .aspect-h-9 { --tw-aspect-h: 9; --tw-aspect-w: 16; }
</style>